#!/bin/bash
install_by_installer() {
  # basic tools
  $1 git lua nexttrace starship gpg
  $1 python ast-grep micromamba
  # replacement of system tools
  $1 lsd bat sd dust ripgrep fd bottom procs duf httpie
  # other tools
  $1 pueue fzf progress atuin hyperfine bitwarden-cli
  $1 git-delta gitui zellij difftastic helix cheat

  # git plugins
  $1 git-lfs
  git lfs install

  # install bun if it's missing
  if ! command -v brew >/dev/null 2>&1; then
    curl -fsSL https://bun.sh/install | sed 's/\.zshrc/\.config/zsh/dotconfig/.bunconfig/g' | bash
  fi

  # TODO: remove this
  if [[ -s $HOME/.bunconfig ]]; then
    mv $HOME/.bunconfig $HOME/.config/zsh/dotconfig/.bunconfig
  fi
}

install_by_brew() {
  # install Homebrew if it's missing
  if ! command -v brew >/dev/null 2>&1; then
    echo "Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    (echo; echo "eval '$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)'") > $HOME/.brewconfig
    source $HOME/.brewconfig
  fi

  brew install pipx
  brew install gh
  brew install bundler-completion

  # too slow to install modular
  # curl https://get.modular.com | sh -
  # modular auth mut_aad64e0ecc154c848a41db73825820e9
  # modular install mojo

  # For macOS, install some desktop apps.
  if [[ "$OSTYPE" == "darwin"* ]]; then
    brew tap pot-app/homebrew-tap
    brew install --cask pot
    brew install --cask linearmouse
    brew install --cask he3-app/he3/he3
  fi
}

install_by_pacman() {
  if ! command -v paru >/dev/null 2>&1; then
    echo "Installing paru"
    sudo pacman -S --noconfirm --needed base-devel rustup
    rustup default stable
    git clone https://aur.archlinux.org/paru.git
    cd paru && makepkg -si && cd ..
    rm -rf paru
  fi
  paru -S --noconfirm --needed python-pipx
  paru -S --noconfirm --needed github-cli unrar
  # too slow to install modular
  # paru -S --noconfirm --needed modular
  # modular auth mut_aad64e0ecc154c848a41db73825820e9
  # modular install mojo
}

install_by_pipx() {
  pipx install pdm
  pipx install pre-commit
  pipx install auto-config
  pipx install auto-token
  # 判断是否有nvidia-smi
  if command -v nvidia-smi >/dev/null 2>&1; then
    pipx install nvitop
  fi
}

config_zsh() {
  if ! command -v zi >/dev/null 2>&1; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/z-shell/zi-src/main/lib/sh/install.sh)" -- -i skip
    zsh -cl -- '(source $HOME/.zi.zsh && @zi-scheduler burst) || true'
  fi
  # $HOME/.zprofile
  if [[ ! -f $HOME/.zprofile ]]; then
    touch $HOME/.zprofile
    echo "emulate sh -c 'source /etc/profile'" | tee -a $HOME/.zprofile
  fi
}

if [[ ! -f /.dockerenv ]] && [[ $USER == "root" ]]; then
  echo "Please login as non-root user and run this script again:"
  echo "  su user"
  echo "  yadm clone --bootstrap https://github.com/zrr1999/dotfiles.git"
  exit
fi

if [[ -n "$GITHUB_ACTIONS" ]]; then
  echo "::group::installing packages"
fi
if [[ -f /etc/arch-release ]]; then
  echo "system type: ArchLinux, install by pacman"
  install_by_pacman
  install_by_installer "paru -S --noconfirm --needed"
else
  echo "other system type, install by brew"
  install_by_brew
  install_by_installer "brew install"
fi
install_by_pipx
auto-config
auto-token init
if [[ -n "$GITHUB_ACTIONS" ]]; then
  echo "::endgroup::"
fi

if [[ -n "$GITHUB_ACTIONS" ]]; then
  echo "::group::configuring zsh"
fi
config_zsh
if [[ -n "$GITHUB_ACTIONS" ]]; then
  echo "::endgroup::"
fi
